# -*- coding: utf-8 -*-
"""
@author: Zahra
"""

from keras.models import Sequential
from keras.layers import Dense, Flatten, Dropout, Activation ,Conv1D,MaxPooling1D
import keras.backend as K
from keras.optimizers import Adam,RMSprop,Adadelta,Adagrad
import numpy as np
from keras.layers.embeddings import Embedding

opt = Adam(0.001)
def get_output(model, x):
    inp = model.input  # input placeholder
    output = model.layers[10].output
    functor = K.function([inp, K.learning_phase()], [output])   # evaluation functions
    layer_out = functor([x, 1.])
    return layer_out
def final_model(X_train, X_test, y_train, y_test, y_train_cat, y_test_cat,epochs,batch_size):
    model = Sequential()
    model.add(Embedding(256, 128, input_length=308))
    model.add(Conv1D(32,
                     3,
                     strides=1,
                     padding='same',
                     kernel_initializer='random_normal'))
    model.add(Activation('tanh'))
    model.add(MaxPooling1D(pool_size=5))
    model.add(Dropout(0.35))
    model.add(Conv1D(64, 5))
    model.add(Activation('tanh'))
    model.add(MaxPooling1D(pool_size=3))
    model.add(Dropout(0.45))
    model.add(Flatten())
    model.add(Dropout(0.35))
    model.add(Dense(32))
    model.add(Dropout(0.45))
    model.add(Dense(2, activation='softmax'))
    print(model.summary())
    model.compile(loss='categorical_crossentropy',
                  optimizer=opt,
              metrics=['accuracy'])

    model.fit(X_train, y_train_cat, nb_epoch=epochs, batch_size=batch_size, validation_data=(X_test,y_test_cat), callbacks=[tensorboard])

    print("---------------------------------------------------------")
    print("Get the third layer of first network(CNN) as new features...")
    new_features_test = get_output(model, X_test)
    print("Shape of new features...")
    new_features_test = np.array(new_features_test)
    new_features_test = new_features_test.reshape(new_features_test.shape[1],new_features_test.shape[2])

    # Get index of malware and benign
    index_list_test = np.where(y_test == 1)[0]
    index_list_benign_test = np.where(y_test == 0)[0]

    """ Seprate malware and benign from new features """
    new_benign=[]
    for i in index_list_benign_test:
        new_benign.append(new_features_test[i])
    new_benign = np.array(new_benign)

    new_malware=[]
    for i in index_list_test:
        new_malware.append(new_features_test[i])
    new_malware = np.array(new_malware)
    """ End """

    """ Save new extracted features by CNN"""
    np.savetxt("lstm_malware_test.txt", new_malware)
    np.savetxt("lstm_benign_test.txt",new_benign)

    return 1
